set nocompatible                               " Get rid of original Vi compatibility
set lazyredraw                                 " Do not redraw screen while executing macro, commands
set ttyfast                                    " Send more chars to the tty on redraw
syntax sync minlines=256                       " Speed up syntax highlighting by limiting block height
"set autoindent
"set smartindent
set tabstop=4                                  " Configure tab stop to 4 columns
set shiftwidth=4                               " Configure Vim indentation
set expandtab                                  " Expand tabs to spaces
set smarttab                                   " Remove indent spaces with a single delete
set backspace=indent,eol,start                 " Make backspace erase across lines
set listchars=nbsp:•,tab:▸\ ,eol:¬             " Set tabstops and EOL as in Textmate
"set title                                      " Update xterm title with current edited file info
set ignorecase                                 " Do case insensitive matching
set incsearch                                  " Do incremetal search
set hlsearch                                   " Highlight found pattern
set nowrap                                     " Do not wrap long lines
set pyx=3                                      " pythonx version to 3
set scrolloff=2                                " Force 2 lines of Context above or below the cursor
set showcmd                                    " Show (partial) command in status line.
set showmatch                                  " Show matching brackets
set nrformats="hex"                            " Recognize decimal and hex numbers, not octal
set visualbell t_vb=                           " Disable visual bell

set ruler                                      " Show status line with cursor position
set laststatus=2
set statusline=%<%F\ %h%m%r%=%-14.(%l,%c%V%)\ %P " Default statusline, but with full filepath, usefull with autochdir

" set autochdir                                  " chdir into the buffer filepath, usefull for tag file
" set tags=./tags;                               " Recursively search for tags files
set noeol                                      " Don't add an empty line at the end of a file
set wildmenu                                   " Complete with CTRL-N/P
set wildmode=longest,list                      " Bash-style file completion
set wildignore+=*.pyc                          " Ignore patterns from file completion

set foldmethod=indent                          " fold based on indent
set foldnestmax=10                             " deepest fold is 10 levels
set nofoldenable                               " dont fold by default
set foldlevel=1                                " 

set ssop-=options                              " Don't save local options in sessions


call plug#begin('~/.vim/plugged')
Plug 'andrewradev/bufferize.vim'
Plug 'coderifous/textobj-word-column.vim'
" Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'flazz/vim-colorschemes'
Plug 'isruslan/vim-es6'
Plug 'itchyny/lightline.vim'
Plug 'jeetsukumaran/vim-pythonsense'
Plug 'jiangmiao/auto-pairs'
Plug 'kien/ctrlp.vim'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'valloric/listtoggle'
Plug 'vim-scripts/argtextobj.vim'
Plug 'vim-scripts/closetag.vim'
Plug 'vim-scripts/paredit.vim'
" Plug 'w0rp/ale'
call plug#end()


if !has('gui_running')
  set t_Co=256                                 " Supports 256 colors
endif

set background=dark                            " Tell Vim to use a color scheme suitable for dark background
colorscheme desert256v2
hi WarningMsg ctermfg=15 ctermbg=Red guifg=White guibg=Red gui=NONE
hi Pmenu ctermfg=230 ctermbg=238 guifg=#ffffd7 guibg=#444444
hi PmenuSel ctermfg=232 ctermbg=192 guifg=#080808 guibg=#cae982


if has("autocmd")
    syntax on
    filetype plugin indent on

    augroup mycustomautocommands
        " clear autocommand from the group if sourced twice
        autocmd!

        au BufNewFile,BufRead *.yaml.tmpl set filetype=gotexttmpl
        autocmd Filetype html setlocal ts=2 sw=2 expandtab
        autocmd Filetype javascript setlocal ts=2 sw=2 expandtab
    augroup END

    """ NERDTree config
    augroup nerdtree
        " clear autocommand from the group if sourced twice
        autocmd!

        autocmd FileType nerdtree setlocal signcolumn=no modifiable
        "
        " Auto open on `vim [dir]`
        autocmd StdinReadPre * let s:std_in=1

        autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

        " Auto open on new vim without files argument
        autocmd vimenter * if !argc() | NERDTree | endif

        " Auto quit if Nerdtree is last and only buffer
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

        " Auto find file in Nerdtree
        " autocmd BufEnter * if &modifiable | NERDTreeFind | wincmd p | endif
    augroup END

endif


" MacVim options
if has("gui_running")
    set guioptions=-t
    set guifont=Monaco:h12
endif


""" Key mapping
map <C-L> :noh<CR>:redraw!<CR>

map <leader>se :Errors<CR>
map <leader>n :lne<CR>
map <leader>p :lp<CR>
map <leader>N :NERDTreeFind<CR>

" Unbind the cursor keys in insert, normal and visual modes.
for prefix in ['i', 'n', 'v']
    for key in ['<up>', '<down>', '<left>', '<right>']
        exe prefix . "noremap " . key . " <nop>"
    endfor
endfor

" Abbreviation
abbrev resutl result
abbrev reslut result


" Plugins params
let g:ctrlp_working_path_mode = 'ra'                               " Search the first parent directory containing a SCM directory
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|\.git\|htmlcov\|.venv\|venv\|test-reports'


" listopen
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>q'

" if has("python3")
" py3 << EOF
" import os
" import sys
" if 'VIRTUAL_ENV' in os.environ:
"     venv_base_dir = os.environ['VIRTUAL_ENV']
"     venv_bin_dir = os.path.join(venv_base_dir, 'bin')
" 
"     old_os_path = os.environ.get('PATH', '')
"     os.environ['PATH'] = venv_bin_dir + os.pathsep + old_os_path
"     site_packages = os.path.join(venv_base_dir, 'lib', 'python%s' % sys.version[:3], 'site-packages')
"     prev_sys_path = list(sys.path)
" 
"     import site
"     site.addsitedir(site_packages)
"     sys.real_prefix = sys.prefix
"     sys.prefix = venv_base_dir
"     # Move the added items to the front of the path:
"     new_sys_path = []
"     for item in list(sys.path):
"         if item not in prev_sys_path:
"             new_sys_path.append(item)
"             sys.path.remove(item)
"     sys.path[:0] = new_sys_path
" EOF
" endif


" Add diagnostic info for https://github.com/itchyny/lightline.vim
" \ 'colorscheme': 'desert256v2',

set noshowmode  " shown in lightline
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'absolutepath', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }



" Neovim
" Disable python2
let g:loaded_python_provider = 0
" Disable ruby
let g:loaded_ruby_provider = 0


hi WarningMsg ctermfg=15 ctermbg=Red guifg=White guibg=Red gui=NONE
hi Pmenu ctermfg=230 ctermbg=238 guifg=#ffffd7 guibg=#444444
hi PmenuSel ctermfg=232 ctermbg=192 guifg=#080808 guibg=#cae982

""" CoC configuration

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()
" Previous Config: inoremap <silent><expr> <c-tab> :call CocAction("showSignatureHelp")<cr>

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup CocAutocommands
  autocmd!

  " Highlight the symbol and its references when holding the cursor.
  if !&diff
    autocmd CursorHold * silent call CocActionAsync('highlight')
  endif

  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif
